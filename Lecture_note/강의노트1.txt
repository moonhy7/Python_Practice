// 수업을 위한 환경 설정
1) 설문지 작성 및 전송
# 설문지 파일 다운로드
본인이름.txt 파일을 저장하고 작성 후 채팅창으로 전송 
2) 크롬웹브라우저 설치 확인
    미설치시 다운로드 후 설치
3) 작업폴더 생성
   예) pyclass
4) 파이썬이 작업컴퓨터에 미리 설치 확인
  윈도우 + R
  cmd
  터미널창에서  python 입력
5) 아나콘다 설치 
   
6) 파이썬 자동 패스 확인
  윈도우 + R
  cmd
  터미널창에서 python 입력
  파이썬 쉘 화면이 나오면 버전 확인
  파이썬 쉘 종료는?   exit()

7) 파이참 다운로드 후 설치
  https://www.jetbrains.com/pycharm
   Community 버전으로 Download  (중요함)

# --------------------------------------------------

# 라이브러리 설치
[File]-[Settings]-[Python Interpreter]
pymysql / flask

# --------------------------------------------------


# 한줄주석  (ctrl+/)
'''
 여러줄 주석1
 여러줄 주석2
'''

# 다른언어의 주석은?
/*
 c, c#, c++, java, js ....
*/

# 출력문
# print(값/수식/변수, end='대체문자나 공백') 문

# 쉼표를 이용한 출력문

# end 옵션을 이용한 한줄 출력문

# 변수 = 수식 또는 값
# 파이썬은 자료형 없이 변수명만 정의

# 문자열 연산자 +(연결), *(반복)
# 문자열1 + 문자열2
# 문자열*숫자

# 이스케이프 코드 : p48 참조
# \n, \t
# \\ (\표시)
# \', \" (인용부호표시)

# 변수 할당 방법
# 변수 = 수식 또는 값
# 서로 다른 변수에 동일한 값 할당

# 쉼표(,)를 이용한 변수 할당
# 변수1, 변수2 = 값1, 값2

# 퀴즈 : user1, user2의 변수값을 서로 변경하여라
user1 = "영희"
user2 = "철수"
# 중간변수 설정
# 쉼표를 이용한 변수 교체

# 변수명 정의방식
# 카멜표기법 : 대문자소문자로 단어 분리
# userAge
# 스네이크 기법 : _, - 단어 연결
# user_age

# 파이썬 코딩 가이드 => 권장 사항
# 변수 < 집합형 < 클래스 < 라이브러리 < 패키지

# 클래스명은 첫글자를 대문자로 표시
# 함수명은 소문자로 표시
# 변수명은 소문자로 시작
# 예약어는 변수명으로 사용할 수 없다
# 파이썬의 예약어(keyword) 출력하기
'''
import keyword
print(keyword.kwlist)
print('키워드 갯수 = ', len(keyword.kwlist))
'''

# --------------------

# 멀티라인 출력문
#  - 개행문자 \n 이용
#  - ''' 문자열 내용 ''' 이용

# 정의된 변수 삭제
# del 변수명

# 데이터형 확인하기
# type(변수/값)

# 자료형의 종류
# 기본자료형
# : 숫자형(정수, 실수, 16진수, 8진수)
# : 문자열형
# : 논리형 Boolean - True / False
# 집합자료형
# : 리스트, 튜플, 딕셔너리, 클래스, 집합


# 입력문
# 변수명 = input(메세지)
# 입력받은 변수는 데이터형이 문자열이다.
# message = input('메세지를 입력하세요? ... \n')
# print('message = ',message)
# print(type(message))

# 16진수 : 숫자0알파벳x16진수
# 8진수 : 숫자0알파벳o8진수
# 결과치는 10진수로 표시

# 자료형 변환 - Casting
# int(값/수식/변수) : 정수형 데이터형으로 변환
# float(값/수식/변수) : 실수형 데이터형으로 변환
# str(값/수식/변수)  : 문자열 데이터형으로 변환



# 퀴즈 : 2개의 숫자값을 입력받은 후 사칙 연산을 수행하여라
'''
첫번째 숫자를 입력하세요... 10
두번째 숫자를 입력하세요... 20
---------
10 + 20 = ?
10 - 20 = ?
10 * 20 = ?
10 / 20 = ?
'''

# 산술연산자
# +, - , *, /, //(정수형 몫), %(나머지), **(제곱)

# 연산자 우선순위
# 괄호()
# *, /
# +, -

# 대입 연산자
# 변수명 += , -= , *= , /=

# 관계 연산자
# 결과값이 True / False
# ==, !=, >, <, >=, <=

# 논리 연산자
# 결과값이 True / False
# and, or, not
# 관계연산자를이용한수식1 논리 연산자 관계연산자를이용한수식2
# not(관계연산자를이용한수식)
# True and True => True
# True and False => False
# False or False => False
# True or False => True
# not(True) => False
# not(False) => True


# is, is not 연산자
# 값이 같은지 비교한다.
# 결과값이 True/ False

# -------------------------------
# 문자열 인덱싱
# 인덱싱이란?  문자열의 위치를 숫자로 표시
# 인덱싱의 첫 위치는 0
# 인덱싱의 마지막 위치는 -1
# 문자열변수[인덱스값]

# 문자열 전체길이는?
# len(문자열이나 문자열변수)

# 문자열 슬라이싱이란?
# 문자열의 일부를 잘라서 표시
# 문자열변수[start:end:step]
# 문자열변수[start:end]
# 문자열변수[start:]
# 문자열변수[:end]
# start 부터 end-1 까지 step 수만큼 건너뛰기


# 출력포맷 방식
# %를 이용한 포맷팅
# format()를 이용한 포맷팅
# f'를 이용한 포맷팅. 파이썬 3.6 이상에서 사용 가능

# %자료형
# %d / %s / %전체자리수.소숫점자리이하숫자f / %o / %x
# print(' 문자열 %자료형 ' % 변수)
# print(' 문자열 %자료형1 %자료형2 ' % (변수1, 변수2))

# %전체자릿수.소수점이하자릿수f
# %.소수점이하자릿수f
pi = 3.14156748
print('pi : %f' % pi )
print('pi : %.3f' % pi )
print('pi : %10.2f' % pi )
print('pi : %3.5f' % pi )
print('pi : %15.1f' % pi )


# 퀴즈 : 2개의 숫자를 입력받아
# 다음과 같이 출력하여라
'''
숫자1을 입력하세요... 12
숫자2를 입력하세요... 12.345

입력받은 숫자1은 12 입니다.
입력받은 숫자1은 8진수로 14 입니다.
입력받은 숫자1은 16진수로 c 입니다.
입력받은 숫자2는 12.3 입니다.
'''

# % 퍼센트 기호 표시 : %%
# 오늘의 미세농도는 0.0005 % 입니다.

# %로 공백 지정
# %양수숫자Style(s/f/d/x/o) : 왼쪽에 공백 생성
# %음수숫자Style(s/f/d/x/o) : 오른쪽에 공백 생성
'''
userName = '홍길동'
userNumber = 123.45
print('user Name : %10s ** ' % userName)
print('user Name : %-10s ** ' % userName)
print('userNumber : %10d ** ' % userNumber)
print('userNumber : %-15f ** ' % userNumber)
'''

# format 을 이용한 출력방식
# ' 문자열1 {} {} 문자열2'.format(변수1, 변수2)
# ' 문자열1 {숫자나 변수} {숫자나 변수} 문자열2'
#   .format(변수1=값1, 변수2=값2)

# 공백이나 공백대신 대체문자 반복 출력하기
# :>숫자 (앞에 공백생성)
# :<숫자(뒤에 공백생성)
# :^숫자(좌우에 여백생성) : {}안에 입력
# :대체문자>숫자 (앞에 대체문자생성)
# :대체문자<숫자(뒤에대체문자생성)
# :대체문자^숫자(좌우에 대체문자)

# format()으로 소숫점 처리하기
# "문자열 {위치인덱스:전체자릿수.소수점이하자릿수f}"
#   .format(값이나 변수)

# format 함수안에서 {} 표시하기
#  '{{ }}'.format()


# f 문자열 포맷팅 : 3.6 이상 지원
# f' 문자열 {변수명이나 변수를이용한수식} '

# f 포맷팅 소수점 처리
# f' 문자열 {변수명:전체자릿수.소숫점이하자릿수f} '

# f' 문자열 공백, 대체문자여백 지정
# f' 문자열 {변수명:>숫자} : 왼쪽여백생성
# f' 문자열 {변수명:<숫자} : 오른쪽여백생성
# f' 문자열 {변수명:^숫자} : 좌우여백생성
# f' 문자열 {변수명:대체문자>숫자} : 왼쪽에 대체문자반복
# f' 문자열 {변수명:대체문자<숫자} : 오른쪽에 대체문자반복
# f' 문자열 {변수명:대체문자^숫자} : 좌우 대체문자 반복

message = 'Hello world'
print(f' *** {message} ***')
print(f' *** {message:>30} ***')
print(f' *** {message:<30} ***')
print(f' *** {message:^30} ***')
print(f' *** {message:#^30} ***')
print(f' *** {message:!>30} ***')
print(f' *** {message:!<30} ***')

# --------------------------
# 문자열 함수 p67
# 문자열변수.함수명(옵션)
# 문자열.함수명(옵션)

# 샘플 문자열 만들기
# http://www.lipsum.com 이용


# 특정 문자열의 갯수 출력
# 문자열변수.count(찾고자하는문자열)

# 특정 문자열의 시작인덱스 위치 반환
# 문자열변수.find(찾고자하는문자열)
# 찾고자 하는 문자열이 없다면 -1 반환
# 문자열변수.index(찾고자하는문자열)
# 찾고자 하는 문자열이 없다면 에러 발생

# 문자열 교체하기
# 문자열변수.replace(찾고자하는문자열, 교체문자열)
# is => was

# '연결문자'.join(문자열변수)

# 좌우 공백 제거하기
# 문자열변수.strip()
# 문자열변수.rstrip()
# 문자열변수.lstrip()


