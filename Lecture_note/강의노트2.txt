
# 자료형의 종류
# 기본 자료형 - 문자열, 정수, 실수, 불린형
# 집합형 자료형=콜렉션 : 여러개의 구성요소로 조직화
#       : 리스트 [], 튜플 (), 딕셔너리 { }, 집합{ }
# CRUD : Create Read Update Delete

# 리스트 []
# 다른 데이터형 가능
# 순차적으로 생성
# 빈 리스트, 초기값 설정 방식

# 초기값 설정 방식을 이용한 리스트 정의
# 리스트변수 = [값1, 값2...]

# 빈 리스트를 이용한 리스트 정의
# 리스트변수 = []

# 서로 다른 데이터형으로 리스트 정의

# 리스트 인덱싱
# 리스트이름[숫자] : 0부터 시작, 숫자값이 -1 마지막 요소 표시

# 리스트 슬라이싱
# 리스트이름[start:end:step]
# 리스트이름[start:end]
# 리스트이름[start:]
# 리스트이름[:end]
# 리스트이름[::step]
# 리스트이름[:] = 리스트이름[::] = 전체리스트

# 리스트 값 변경하기
# 리스트변수[인덱스] = 값

# 리스트 연산
# 리스트1 + 리스트2 : 같이 표시
# 리스트이름*숫자 : 반복

# 리스트 함수
# 리스트변수.함수명(옵션)
# 정의된 리스트에 새로운 값을 추가
# 리스트변수.append(값) : 마지막에 아이템이 추가
# 리스트변수.insert(삽입위치, 값) : 삽입위치에 아이템이 추가


# 리스트 삭제와 관련된 함수와 명령어
# 리스트변수.remove(값) : 값으로 삭제하기
# 리스트변수.pop() : 마지막 요소가 삭제되면서 값이 반환된다.
# 리스트변수.pop(위치값)
# : 위치에 해당하는 요소가 삭제되면서 값이 반환된다.
# 리스트변수.clear() : 리스트안의 값이 모두 삭제. 빈리스트로 된다.
# del 리스트변수 : 리스트 자체가 삭제된다.

# 메모리에 리스트 없애기
del numList2
# del 리스트변수[위치] = 리스트변수.pop(위치)
# NameError: name 'numList2' is not defined
# print(f'numList2 = {numList2}')

# 리스트 전체 길이 출력
# len(리스트변수)
# 리스트 데이터형 출력
# type(리스트변수)

# 입력받은 값으로 리스트를 생성하여라

# 리스트 값 정렬하기
# 리스트변수.reverse()
# 리스트변수.sort()
# 주의사항은 리스트변수.sort()의 경우
# 리스트를 이루는 구성요소의 데이터형은 같아야한다
# TypeError 발생

# 리스트변수.count(값)
# 중복값이 몇개인가?

# 리스트변수.index(값)
# 값에 해당하는 요소가 몇번째에 위치하고 있는가?


# 여러개의 요소를 한꺼번에 리스트에 추가 싶다면?
# 리스트변수.extend([값1,값2...])

# ------------------------------------------------

# 캐스팅
# 문자열 => 리스트
# 문자열변수.split() : 공백을 기준으로 해서 리스트화
# 문자열변수.split(구분문자) : 구분문자를 기준으로 해서 리스트화
# list(문자열변수)
# : 공백도 모두 리스트화. 낱글자가 아이템요소로 변경


# 리스트 => 문자열
# str(리스트이름)
# : [ ], 쉼표(,) 도 포함해서 모두 문자열화
# '구분자'.join(리스트이름)
# : 구분자가 아이템요소 사이에 모두 추가된 후 문자열화

# 중첩 리스트 구조
# 리스트안에 리스트가 있다
# 중첩리스트의 인덱싱은?
# 리스트이름[index1][index2]

# 중첩 리스트 생성1
# 초기값으로 중첩 리스트 생성
# 리스트변수 = [ [값1, 값2...],[값1, 값2...]]

# 중첩 리스트 생성2
# 1차원 리스트 정의 후 1차원 리스트를 다시 리스트로 구성

# 퀴즈 :
'''
아래의 리스트를 이용하여 grade 리스트를 생성하고 합계와 평균을
과목별로 출력한다. 평균은 소숫점 2번째 자리까지 출력한다.

kor = [100, 80, 85]
math = [55, 70, 35]
eng = [80, 80, 100]
python = [90, 70, 88]
------------
result
kor : 합계 = ? , 평균 = ?
math : 합계 = ? , 평균 = ?
eng : 합계 = ? , 평균 = ?
python : 합계 = ? , 평균 = ?
'''
# ------------------------------
# 튜플
# CRUD : Create Read Update(Add)
# 튜플 생성1 (초기값 지정)
# 튜플변수 = (값1, 값2...)

# 튜플 생성2 (초기값 지정)
# 튜플변수 = 값1, 값2...

# 튜플 생성3 (빈 튜플)
# 튜플변수 = ()

# 튜플 인덱싱
# 튜플변수[인덱싱위치번호] , 0부터 시작
# 튜플 슬라이싱
# 튜플변수[start:end:step]

# 튜플의 값은 교체가 가능한가?
# TypeError , 내용 교체가 불가능하다.

# 튜플은 값을 새로 추가할 수 있는가?
# 튜플변수 += (값1,)
# 한개 추가시에는 쉼표(,) 주의
# 튜플변수 += (값1, 값2...)

# 튜플의 값은 삭제가 가능한가?
# 튜플 요소 각각의 값 삭제는 불가능
# 튜플변수 전체 삭제는 가능
# del 튜플변수

# 튜플의 연산자 + : 튜플끼리 더하기
# 튜플의 연산자 * 숫자 : 튜플 요소 반복

# 각각 튜플 변수 정의하기
# 튜플전체변수 = (변수1, 변수2...) = (값1, 값2...)

# 튜플 함수
# 튜플변수.count(값)
# 튜플변수.index(값)
# 튜플변수.sort()  가능한가? AttributeError
# 튜플변수.reverse()  가능한가? AttributeError

# numberTuple.sort()
# numberTuple.reverse()

# 캐스팅
# 문자열 => 튜플 : tuple(문자열변수나 값)
# 리스트 => 튜플 : tuple(리스트변수나 값)


# 튜플 => 문자열
# : str(튜플변수나 값)
# : 구분자.join(튜플변수나 값)
#  주의사항은 join() 사용시에는 튜플의 자료형이 문자열이어야 한다.
# 튜플 => 리스트 : list(튜플변수나 값)


# 튜플 리스트란?
# 리스트안에 튜플이 삽입되어 있는 구조



# 퀴즈
'''
아래와 같이 튜플을 정의한 후 출력하여라.
튜플 리스트 : ('강아지','토끼','돼지','곰')
튜플 요소 추가 후 : ('강아지','토끼','돼지','곰','호랑이')
튜플의 0-3번째 요소 표시 : ('강아지','토끼','돼지','곰')
'강아지' 요소의 위치값은?
튜플을 문자열로 변환하여 출력 : ?
튜플을 리스트로 변환하여 출력 : ?
'''

'''
튜플 리스트 :  ('강아지', '토끼', '돼지', '곰')
튜플 요소 추가 후 :  ('강아지', '토끼', '돼지', '곰', '호랑이')
튜플의 0-3번째 요소 표시 :  ('강아지', '토끼', '돼지', '곰')
'강아지' 요소의 위치값은?   0
튜플을 문자열로 변환하여 출력 :  강아지,토끼,돼지,곰,호랑이
튜플을 리스트로 변환하여 출력 : :  ['강아지', '토끼', '돼지', '곰', '호랑이']
'''

# ------------------------------------------------

# 딕셔너리
# CRUD : Create Read Update Delete
# 딕셔너리 생성 - 초기값 지정
# 딕셔너리변수 = {키1:값1, 키2:값2,...}
# 키값은 문자형, 숫자형 둘다 가능


# 딕셔너리 생성 - 빈 딕셔너리 생성 후 값 추가
# 딕셔너리 요소 추가
# 딕셔너리변수[키값]=값

# 딕셔너리 요소 조회 : 키인덱싱
# 딕셔너리변수[키값] => 해당요소의 값 표시

# 리스트, 튜플처럼 숫자 인덱싱이 가능할까?
# KeyError : 딕셔너리는 키값으로만 호출가능

# 리스트, 튜플처럼 슬라이싱이 가능할까?
# TypeError 딕셔너리는 슬라이싱이 불가능
# print(f'dict3[0:2] = {dict3[0:2]}')

# 딕셔너리 중복키는 가능할까요?
# 값은 같아도 되지만 키값이 중복되면 마지막 키값만 유효하다

# 딕셔너리 값 교체
# 딕셔너리[키값]=값

# 딕셔너리 요소 삭제
# 딕셔너리변수.clear()
# 딕셔너리변수.pop(키값)
# del 딕셔너리변수
# del 딕셔너리변수[키값]

# 딕셔너리 함수
# 딕셔너리변수.values() : 값 만 표시
# 딕셔너리변수.keys() : 키값만 표시
# 딕셔너리변수.items() : 튜플스타일로 표시 (키, 값)...

# 딕셔너리에서 키값만 리스트로 만들어서 마지막 키값 조회

# 캐스팅
# 딕셔너리 => 리스트
# 리스트 => 딕셔너리
# 값만 모아서 리스트로 생성
# list(딕셔너리변수) => 키값만으로 생성된 리스트


# 리스트 => 딕셔너리(인덱싱숫자가 키값이 된다)
# 리스트 => enumerate(리스트,문자열,튜플)
#   => dict(enumerate(리스트,문자열,튜플))
# dict()
# enumerate(리스트,문자열,튜플)
# : 리스트,문자열,튜플 같은 자료형을 enumerate 객체로 반환
# enumerate 객체의 요소는 딕셔너리 스타일. 키값은 숫자로 표시

# 딕셔너리 => 문자열
# str(딕셔너리변수) => {...}
# 구분자.join(딕셔너리변수) => 키값으로 생성된 문자열

# 딕셔너리 => 튜플
# tuple(딕셔너리) => 키값으로 구성된 튜플 생성

# 튜플 변경은? ('a', 's', 'c', 'd', 'y')
# 딕셔너리 값으로만 이루어진 튜플 생성

# 딕셔너리 리스트
# 리스트안에 딕셔너리가 있는 구조
dictList = [{'a':'apple', 'v':'victory'},
            {100:'백', 200:'이백'},
            {'user1':'김철수', 'user2':'고소영'}]

#------------------------------
# 집합
# {값1, 값2, 값3....}
# CRUD :
# Create
# Read(전체조회만 가능)
# Update Delete
# 집합의 생성
# 집합변수 = set(리스트/문자열/튜플)
# 순서가 없다. 랜덤하게 출력된다.
# 인덱싱이 불가능하다. 슬라이싱 불가능하다.

# 중복값을 허용할까요? => 1개만 표시

# 집합의 요소 추가
# 집합변수.add(값)
# 집합변수.update([값1, 값2...])

# 집합의 요소 삭제
# 집합변수.remove(값)

# del 집합변수 => 메모리에서 삭제

# 집합의 연산
# +, * => 불가능

# 집합 합치기 = 합집합
# 집합변수3 = 집합변수1|집합변수2
# 집합변수3 = 집합변수1.union(집합변수2)

# 차집합
# 집합변수3 = 집합변수1-집합변수2
# 집합변수3 = 집합변수1.difference(집합변수2)
userSet7 = userSet1-userSet2

# 교집합
# 집합변수3 = 집합변수1&집합변수2
# 집합변수3 = 집합변수1.intersection(집합변수2)



# 캐스팅
# 집합 => 리스트
# list(집합변수)

# 집합 => 튜플
# tuple(집합변수)

# 리스트,문자열,튜플 => 집합
# set(리스트,문자열,튜플)



# 퀴즈
# 다음 캐스팅이 되는지 확인해 보세요
# 집합 => 문자열
# 집합 => 딕셔너리 (키는 숫자로 생성)




